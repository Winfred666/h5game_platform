// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma" // just generate into node modules.
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// schema.prisma
model Game {
  id          String   @id @default(cuid()) // or @default(uuid())
  title       String   @unique
  isOnline    Boolean  @map("is_online") // true if the game can be played online.
  width       Int?
  height      Int?
  description String   @default("")// must has, can be "" empty string.

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // WARNING: a minimun protect: use private postfix to avoid URL guessing download by bots.
  isPrivate   Boolean  @default(true) @map("is_private") // true if the game is private.

  size        Int                  // Store in byte, disply in MB, max 1 GB.
  views       Int      @default(0) // incremented when the game is started(online) or downloaded(both online and offline).
  // downloads rate, pretty small.
  // downloads   Int      @default(0) // incremented when the game is downloaded.
  
  // store webp, only need to record number of screenshots.
  screenshotCount Int @map("screenshot_count")
  // coverPostfix  String   @map("cover_postfix") // only postfix of the cover image, coverImage URL need generate dynamically
  // --- RELATIONAL FIELDS ---
  // tags is like ",a,b,c,", no binding to a Tag model.
  // tags        String  
  tags        Tag[]
  developers  User[]
  // comments    Comment[]
  @@map("game")
  // Indexes, for performance. WARNING: add `WHERE is_private = false;` when migrate
  // @@index([createdAt])
}

model User {
  id            String  @id @default(cuid()) // or @default(uuid())
  qq            String  @unique
  name          String
  
  introduction  String  @default("")   // optional, at least set ""
  // only postfix of the avatar image, store webp. avatar URL
  hasAvatar     Boolean @default(false) @map("has_avatar") // true if the user has an avatar.
  // avatarPostfix String  @map("avatar_postfix")
  contacts      String  @default("")  // like "QQ:xxx,phone:xxx,"
  hash          String  // salted hashed password, not stored in plain text.
  isAdmin       Boolean @default(false) @map("is_admin") // true if the user is an admin.
  createdAt     DateTime @default(now()) @map("created_at")
  // --- RELATIONAL FIELDS ---
  games         Game[]
  // comments      Comment[]
  @@map("user")
}

// only for select, normal case not deletable. 
// more of a time we just want to hide it from uploader instead of deleting it.

model Tag {
  id        String  @id @default(cuid()) // or @default(uuid())
  name      String  @unique // e.g., "Action", "Puzzle", "RPG"
  // -- RELATIONAL FIELDS ---
  hide      Boolean @default(false)
  games     Game[]
  @@map("tag")
}

// model Comment {
//   id      String   @id @default(cuid())
//   content String
//   createdAt DateTime @default(now()) @map("created_at")
//   userId  String   @map("user_id")
//   gameId  String   @map("game_id")
  
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
//   @@index([userId])
//   @@index([gameId])
//   @@map("comment")
// }

// for configuration

model Configuration {
  key   String @id @unique
  value String

  @@map("configuration")
}